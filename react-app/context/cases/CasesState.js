import React, { useReducer, useContext } from "react";
import AppReducer from "../AppReducer";
import axios from "axios";
import CasesContext from "./casesContext";
import InViewContext from "../../context/inView/inViewContext";
import { GET_CASES } from "../types";

export default function CasesState(props) {
  const inViewContext = useContext(InViewContext);
  const currentUserInDisplay = inViewContext.state.id.toString();
  let inputTextCaseTitle = "";
  const initialState = {
    user: "",
    cases: [],
    loadingCases: false,
  };
  const [state, dispatch] = useReducer(AppReducer, initialState);
  const apiUrlCases = `${data.root_url}/wp-json/${data.api_url}/cases`;

  const getCases = async (id, onlyFetch) => {
    if (!onlyFetch) {
      dispatch({
        type: GET_CASES,
        payload: {
          user: state.user,
          cases: state.cases,
          loadingCases: true,
        },
      });
    }

    const res = await axios.get(`${apiUrlCases}/${id}`, {
      headers: {
        "X-WP-Nonce": data.nonce,
      },
    });

    if (!onlyFetch) {
      dispatch({
        type: GET_CASES,
        payload: {
          user: state.user,
          cases: res.data,
          loadingCases: false,
        },
      });
    }

    return res.data;
  };

  const postCase = async (id, title) => {
    if (title === "") {
      alert("The title can not be blank!");
      return;
    }

    const dataToPost = { id_user: id, title: title };

    try {
      const res = await axios.post(`${apiUrlCases}/${id}`, dataToPost, {
        headers: {
          "X-WP-Nonce": data.nonce,
          "Content-type": "application/json",
        },
      });

      const getAllCases = await getCases(id, true);
      const newCaseAutoGeneratedId = getAllCases[getAllCases.length - 1].id;
      const newCase = {
        id: newCaseAutoGeneratedId,
        id_user: id,
        title: title,
        status: "open",
      };
      let currentCases = state.cases;
      let newCases = [...currentCases, newCase];

      dispatch({
        type: GET_CASES,
        payload: {
          user: id,
          cases: newCases,
          loadingCases: false,
        },
      });
    } catch (error) {
      alert(
        "Hum, it was impossible to complete this task. We had an error: " +
          error
      );
    }
  };

  const toggleCase = async (id) => {
    try {
      /*const res = await axios.post(`${apiUrlCases}-status/${id}`, {
        headers: {
          "X-WP-Nonce": data.nonce,
        },
      }); */

      const grab = await fetch(`${apiUrlCases}-status/${id}`, {
        method: "POST",
        headers: {
          "X-WP-Nonce": data.nonce,
        },
      });

      let currentCases = [...state.cases];

      currentCases.forEach((element) => {
        if (element.id.toString() === id.toString()) {
          switch (element.status) {
            case "close":
              element.status = "open";
              break;
            case "open":
              element.status = "close";
              break;
            default:
              break;
          }
        }
      });

      dispatch({
        type: GET_CASES,
        payload: {
          user: id,
          cases: currentCases,
          loadingCases: state.loadingCases,
        },
      });
    } catch (error) {
      alert(
        "Hum, it was impossible to complete this task. We had an error: " +
          error
      );
    }
  };

  const deleteCase = async (id, title) => {
    const confirm = window.confirm(
      "Do you want to delete the case under the name " + title + "?"
    );
    if (!confirm) return;

    try {
      const cases = state.cases;
      const filteredCases = cases.filter(
        (theCase) => theCase.id.toString() !== id.toString()
      );

      dispatch({
        type: GET_CASES,
        payload: {
          user: id,
          cases: filteredCases,
          loadingCases: state.loadingCases,
        },
      });

      const grab = await fetch(`${apiUrlCases}/${id}`, {
        method: "DELETE",
        headers: {
          "X-WP-Nonce": data.nonce,
        },
      });
    } catch (error) {
      alert(
        "Hum, it was impossible to complete this task. We had an error: " +
          error
      );
    }
  };

  const editCase = async (id, id_user, newTitle) => {
    if (newTitle === "") {
      alert("Case title can not be blank");
      return;
    }

    const idTitleObj = { id_user: id_user, title: newTitle };

    try {
      const cases = state.cases;
      cases.forEach((item) => {
        if (item.id === id) {
          item.title = newTitle;
        }
      });

      dispatch({
        type: GET_CASES,
        payload: {
          user: id_user,
          cases: cases,
          loadingCases: state.loadingCases,
        },
      });

      const grab = await fetch(`${apiUrlCases}/${id}`, {
        method: "PUT",
        headers: {
          "X-WP-Nonce": data.nonce,
          "Content-type": "application/json",
        },
        body: JSON.stringify(idTitleObj),
      });
    } catch (error) {
      alert(
        "Hum, it was impossible to complete this task. We had an error: " +
          error
      );
    }
  };

  if (state.user.toString() !== currentUserInDisplay) {
    dispatch({
      type: GET_CASES,
      payload: {
        user: inViewContext.state.id.toString(),
        cases: state.cases,
        loadingCases: state.loadingCases,
      },
    });
  }

  return (
    <CasesContext.Provider
      value={{
        state,
        currentUserInDisplay,
        getCases,
        postCase,
        deleteCase,
        toggleCase,
        editCase,
      }}
    >
      {props.children}
    </CasesContext.Provider>
  );
}
