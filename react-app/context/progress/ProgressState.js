import React, { useContext, useReducer } from "react";
import InViewContext from "../../context/inView/inViewContext";
import AppReducer from "../AppReducer";
import ProgressContext from "./progressContext";
import { GET_STATUS } from "../types";
import { toast } from "react-toastify";
import axios from "axios";

export default function ProgressState(props) {
  const inViewContext = useContext(InViewContext);
  const currentUserInDisplay = inViewContext.state.id.toString();

  const initialState = {
    status: [],
    caseTitle: "",
    loadingStatus: false,
  };

  const [state, dispatch] = useReducer(AppReducer, initialState);
  const apiUrlProgress = `${data.root_url}/wp-json/${data.api_url}/progress`;

  //onlyFetch means this function will retrieve plain data from api, without state update
  const getStatus = async (id, onlyFetch, caseTitle) => {
    try {
      if (!onlyFetch) {
        dispatch({
          type: GET_STATUS,
          payload: {
            status: state.status,
            caseTitle: state.caseTitle,
            loadingStatus: true,
          },
        });
      }

      const res = await axios.get(`${apiUrlProgress}/${id}`, {
        headers: {
          "X-WP-Nonce": data.nonce,
        },
      });

      if (!onlyFetch) {
        dispatch({
          type: GET_STATUS,
          payload: {
            status: res.data,
            caseTitle: caseTitle,
            loadingStatus: false,
          },
        });
      }
      return res.data;
    } catch (error) {
      alert(
        "Hum, it was impossible to complete this task. We had an error: " +
          error
      );
    }
  };

  //TODO: verify this
  const postStatus = async (id, text) => {
    if (text === "") {
      alert("Status text can not be blank!");
      return;
    }

    const dataToPost = { id_case: id, text: text };

    try {
      const postSatus = await axios.post(
        `${apiUrlProgress}/${id}`,
        dataToPost,
        {
          headers: {
            "X-WP-Nonce": data.nonce,
            "Content-type": "application/json",
          },
        }
      );

      const getAllStatus = await getStatus(id, true);
      const newStatusAutoGeneratedId = getAllStatus[getAllCases.length - 1].id;
      const createdAt = getAllStatus[getAllCases.length - 1].created_at;
      const newStatus = {
        id: newStatusAutoGeneratedId,
        id_case: id,
        text: text,
        created_at: createdAt,
      };
      let currentStatuses = state.status;
      let newStatuses = [...currentStatuses, newStatus];

      dispatch({
        type: GET_STATUS,
        payload: {
          status: newStatuses,
          caseTitle: state.caseTitle,
          loadingCases: state.loadingCases,
        },
      });

      toast.success("Status added!", {
        position: "bottom-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });
    } catch (error) {
      alert(
        "Hum, it was impossible to complete this task. We had an error: " +
          error
      );
    }
  };

  return (
    <ProgressContext.Provider
      value={{
        state,
        getStatus,
      }}
    >
      {props.children}
    </ProgressContext.Provider>
  );
}
